import { jsPDF } from "jspdf"

export const exportToPdf = () => {
  // Create a new PDF document
  const doc = new jsPDF()

  // Set font size and style
  doc.setFontSize(22)
  doc.setFont("helvetica", "bold")

  // Add title
  doc.text("GPA & CGPA Calculator Results", 105, 20, { align: "center" })

  // Add date
  doc.setFontSize(10)
  doc.setFont("helvetica", "normal")
  doc.text(`Generated on: ${new Date().toLocaleString()}`, 105, 30, { align: "center" })

  // Add line
  doc.setLineWidth(0.5)
  doc.line(20, 35, 190, 35)

  // GPA Results
  doc.setFontSize(16)
  doc.setFont("helvetica", "bold")
  doc.text("GPA Results", 20, 45)

  // Get GPA data from the page
  const gpaCard = document.getElementById("gpa-calculator-card")
  if (gpaCard) {
    // Get subjects
    const subjects: { name: string; grade: string; credits: string }[] = []
    const subjectRows = gpaCard.querySelectorAll(".grid.grid-cols-12.gap-4.items-center")

    subjectRows.forEach((row) => {
      const nameInput = row.querySelector(".col-span-5.md\\:col-span-6 input") as HTMLInputElement
      const gradeSelect = row.querySelector(".col-span-3.md\\:col-span-2 [data-radix-select-trigger]") as HTMLElement
      const creditsInput = row.querySelector(".col-span-3.md\\:col-span-3 input") as HTMLInputElement

      if (nameInput && gradeSelect && creditsInput && nameInput.value) {
        subjects.push({
          name: nameInput.value,
          grade: gradeSelect.textContent || "",
          credits: creditsInput.value,
        })
      }
    })

    // Add subjects to PDF
    if (subjects.length > 0) {
      doc.setFontSize(12)
      doc.setFont("helvetica", "normal")

      doc.text("Subject", 20, 55)
      doc.text("Grade", 120, 55)
      doc.text("Credits", 150, 55)

      doc.setLineWidth(0.2)
      doc.line(20, 58, 190, 58)

      let yPos = 65
      subjects.forEach((subject) => {
        doc.text(subject.name, 20, yPos)
        doc.text(subject.grade, 120, yPos)
        doc.text(subject.credits, 150, yPos)
        yPos += 8
      })

      // Get GPA result
      const gpaResult = gpaCard.querySelector(".text-4xl.font-bold.text-primary")
      if (gpaResult) {
        doc.setFontSize(14)
        doc.setFont("helvetica", "bold")
        doc.text(`GPA: ${gpaResult.textContent}`, 20, yPos + 10)
      }
    } else {
      doc.setFontSize(12)
      doc.text("No GPA data available", 20, 55)
    }
  }

  // CGPA Results
  doc.setFontSize(16)
  doc.setFont("helvetica", "bold")
  doc.text("CGPA Results", 20, 120)

  // Get CGPA data from the page
  const cgpaCard = document.getElementById("cgpa-calculator-card")
  if (cgpaCard) {
    // Get semesters
    const semesters: { name: string; gpa: string; credits: string }[] = []
    const semesterRows = cgpaCard.querySelectorAll(".grid.grid-cols-12.gap-4.items-center")

    semesterRows.forEach((row) => {
      const nameInput = row.querySelector(".col-span-5.md\\:col-span-6 input") as HTMLInputElement
      const gpaInput = row.querySelector(".col-span-3.md\\:col-span-2 input") as HTMLInputElement
      const creditsInput = row.querySelector(".col-span-3.md\\:col-span-3 input") as HTMLInputElement

      if (nameInput && gpaInput && creditsInput && nameInput.value) {
        semesters.push({
          name: nameInput.value,
          gpa: gpaInput.value,
          credits: creditsInput.value,
        })
      }
    })

    // Add semesters to PDF
    if (semesters.length > 0) {
      doc.setFontSize(12)
      doc.setFont("helvetica", "normal")

      doc.text("Semester", 20, 130)
      doc.text("GPA", 120, 130)
      doc.text("Credits", 150, 130)

      doc.setLineWidth(0.2)
      doc.line(20, 133, 190, 133)

      let yPos = 140
      semesters.forEach((semester) => {
        doc.text(semester.name, 20, yPos)
        doc.text(semester.gpa, 120, yPos)
        doc.text(semester.credits, 150, yPos)
        yPos += 8
      })

      // Get CGPA result
      const cgpaResult = cgpaCard.querySelector(".text-4xl.font-bold.text-primary")
      if (cgpaResult) {
        doc.setFontSize(14)
        doc.setFont("helvetica", "bold")
        doc.text(`CGPA: ${cgpaResult.textContent}`, 20, yPos + 10)
      }
    } else {
      doc.setFontSize(12)
      doc.text("No CGPA data available", 20, 130)
    }
  }

  // Add footer
  doc.setFontSize(10)
  doc.setFont("helvetica", "italic")
  doc.text("Generated by GPA & CGPA Calculator for Engineering Students", 105, 280, { align: "center" })

  // Save the PDF
  doc.save("gpa-cgpa-results.pdf")
}
